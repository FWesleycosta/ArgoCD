alertmanager:
  additionalPeers: []
  affinity: {}
  config:
    global:
      resolve_timeout: 5m
    receivers:
    - name: "null"
    route:
      group_by:
      - job
      group_interval: 5m
      group_wait: 30s
      receiver: "null"
      repeat_interval: 12h
      routes:
      - match:
          alertname: Watchdog
        receiver: "null"
  configMaps: []
  configNamespaceSelector: {}
  configSelector: {}
  configuration: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    readOnlyRootFilesystem: false
    runAsNonRoot: true
  containers: []
  enabled: true
  externalConfig: false
  externalUrl: ""
  image:
    pullSecrets: []
    registry: docker.io
    repository: bitnami/alertmanager
    tag: 0.23.0-debian-10-r173
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: alertmanager.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    tls: false
  listenLocal: false
  livenessProbe:
    enabled: true
    failureThreshold: 120
    initialDelaySeconds: 0
    path: /-/healthy
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  paused: false
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    size: 8Gi
    storageClass: ""
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podDisruptionBudget:
    enabled: false
    maxUnavailable: ""
    minAvailable: 1
  podMetadata:
    annotations: {}
    labels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  portName: web
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 120
    initialDelaySeconds: 0
    path: /-/ready
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  replicaCount: 1
  resources: {}
  retention: 120h
  routePrefix: /
  secrets: []
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    healthCheckNodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 9093
    stickySessions: ""
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    interval: ""
    metricRelabelings: []
    relabelings: []
  storageSpec: {}
  tolerations: []
  volumeMounts: []
  volumes: []
blackboxExporter:
  affinity: {}
  args: []
  command: []
  configuration: |
    "modules":
      "http_2xx":
        "http":
          "preferred_ip_protocol": "ip4"
        "prober": "http"
      "http_post_2xx":
        "http":
          "method": "POST"
          "preferred_ip_protocol": "ip4"
        "prober": "http"
      "irc_banner":
        "prober": "tcp"
        "tcp":
          "preferred_ip_protocol": "ip4"
          "query_response":
          - "send": "NICK prober"
          - "send": "USER prober prober prober :prober"
          - "expect": "PING :([^ ]+)"
            "send": "PONG ${1}"
          - "expect": "^:[^ ]+ 001"
      "pop3s_banner":
        "prober": "tcp"
        "tcp":
          "preferred_ip_protocol": "ip4"
          "query_response":
          - "expect": "^+OK"
          "tls": true
          "tls_config":
            "insecure_skip_verify": false
      "ssh_banner":
        "prober": "tcp"
        "tcp":
          "preferred_ip_protocol": "ip4"
          "query_response":
          - "expect": "^SSH-2.0-"
      "tcp_connect":
        "prober": "tcp"
        "tcp":
          "preferred_ip_protocol": "ip4"
  containerPorts:
    http: 19115
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  existingConfigMap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/blackbox-exporter
    tag: 0.20.0-debian-10-r61
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      http: ""
    ports:
      http: 19115
    sessionAffinity: None
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
  topologySpreadConstraints: {}
  updateStrategy:
    type: RollingUpdate
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: []
    imageRegistry: ""
    labels: {}
    storageClass: ""
coreDns:
  enabled: true
  namespace: kube-system
  service:
    enabled: true
    port: 9153
    selector: {}
    targetPort: 9153
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
exporters:
  kube-state-metrics:
    enabled: true
  node-exporter:
    enabled: true
extraDeploy: []
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
  labels: {}
  storageClass: ""
kube-state-metrics:
  affinity: {}
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      labels: {}
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  extraArgs: {}
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    labels: {}
    storageClass: ""
  hostAliases: []
  hostNetwork: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/kube-state-metrics
    tag: 2.4.2-debian-10-r42
  kubeResources:
    certificatesigningrequests: true
    configmaps: true
    cronjobs: true
    daemonsets: true
    deployments: true
    endpoints: true
    horizontalpodautoscalers: true
    ingresses: true
    jobs: true
    limitranges: true
    mutatingwebhookconfigurations: true
    namespaces: true
    networkpolicies: true
    nodes: true
    persistentvolumeclaims: true
    persistentvolumes: true
    poddisruptionbudgets: true
    pods: true
    replicasets: true
    replicationcontrollers: true
    resourcequotas: true
    secrets: true
    services: true
    statefulsets: true
    storageclasses: true
    validatingwebhookconfigurations: false
    verticalpodautoscalers: false
    volumeattachments: true
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 120
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  minReadySeconds: 0
  nameOverride: ""
  namespaces: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  priorityClassName: ""
  rbac:
    apiVersion: v1beta1
    create: true
    pspEnabled: true
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    clusterIP: ""
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 8080
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    honorLabels: true
    interval: ""
    jobLabel: ""
    metricRelabelings: []
    namespace: ""
    relabelings: []
    scrapeTimeout: ""
    selector: {}
  tolerations: []
  updateStrategy: {}
kubeApiServer:
  enabled: true
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
kubeControllerManager:
  enabled: true
  endpoints: []
  namespace: kube-system
  service:
    enabled: true
    port: 10252
    selector: {}
    targetPort: 10252
  serviceMonitor:
    https: false
    insecureSkipVerify: ""
    interval: ""
    metricRelabelings: []
    relabelings: []
    serverName: ""
kubeProxy:
  enabled: true
  endpoints: []
  namespace: kube-system
  service:
    enabled: true
    port: 10249
    selector: {}
    targetPort: 10249
  serviceMonitor:
    https: false
    interval: ""
    metricRelabelings: []
    relabelings: []
kubeScheduler:
  enabled: true
  endpoints: []
  namespace: kube-system
  service:
    enabled: true
    port: 10251
    selector: {}
    targetPort: 10251
  serviceMonitor:
    https: false
    insecureSkipVerify: ""
    interval: ""
    metricRelabelings: []
    relabelings: []
    serverName: ""
kubelet:
  enabled: true
  namespace: kube-system
  serviceMonitor:
    cAdvisorMetricRelabelings: []
    cAdvisorRelabelings: []
    https: true
    interval: ""
    metricRelabelings: []
    relabelings: []
nameOverride: ""
node-exporter:
  affinity: {}
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      labels: {}
      storageClass: ""
  commonLabels: {}
  extraArgs:
    collector.filesystem.ignored-fs-types: ^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
    collector.filesystem.ignored-mount-points: ^/(dev|proc|sys|var/lib/docker/.+)($|/)
  extraDeploy: []
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    labels: {}
    storageClass: ""
  hostAliases: []
  hostNetwork: true
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/node-exporter
    tag: 1.3.1-debian-10-r157
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 120
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  minReadySeconds: 0
  nameOverride: ""
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  priorityClassName: ""
  rbac:
    apiVersion: v1beta1
    create: true
    pspEnabled: true
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources:
    limits: {}
    requests: {}
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    addPrometheusScrapeAnnotation: true
    annotations: {}
    clusterIP: ""
    labels:
      jobLabel: node-exporter
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 9100
    targetPort: 9100
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    interval: ""
    jobLabel: jobLabel
    metricRelabelings: []
    namespace: ""
    relabelings: []
    scrapeTimeout: ""
    selector: {}
  tolerations: []
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
operator:
  affinity: {}
  configReloaderResources: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    readOnlyRootFilesystem: false
    runAsNonRoot: true
  enabled: true
  extraArgs: []
  hostAliases: []
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/prometheus-operator
    tag: 0.54.0-debian-10-r12
  kubeletService:
    enabled: true
    namespace: kube-system
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 120
    path: /metrics
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  priorityClassName: ""
  prometheusConfigReloader:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      readOnlyRootFilesystem: false
      runAsNonRoot: true
    image: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 15
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 5
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    path: /metrics
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    healthCheckNodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 8080
    type: ClusterIP
  serviceAccount:
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    interval: ""
    metricRelabelings: []
    relabelings: []
  tolerations: []
prometheus:
  additionalAlertRelabelConfigsExternal:
    enabled: false
    key: ""
    name: ""
  additionalPrometheusRules: []
  additionalScrapeConfigs:
    enabled: false
    external:
      key: ""
      name: ""
    internal:
      jobList: []
    type: external
  additionalScrapeConfigsExternal:
    enabled: false
    key: ""
    name: ""
  affinity: {}
  alertingEndpoints: []
  configMaps: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    readOnlyRootFilesystem: false
    runAsNonRoot: true
  containers: []
  disableCompaction: false
  enableAdminAPI: false
  enableFeatures: []
  enabled: true
  evaluationInterval: ""
  externalLabels: {}
  externalUrl: ""
  image:
    pullSecrets: []
    registry: docker.io
    repository: bitnami/prometheus
    tag: 2.33.4-debian-10-r1
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: prometheus.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    tls: false
  initContainers: []
  listenLocal: false
  livenessProbe:
    enabled: true
    failureThreshold: 10
    initialDelaySeconds: 0
    path: /-/healthy
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
  logFormat: logfmt
  logLevel: info
  matchLabels: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  paused: false
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    size: 20Gi
    storageClass: ""
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  podDisruptionBudget:
    enabled: false
    maxUnavailable: ""
    minAvailable: 1
  podMetadata:
    annotations: {}
    labels: {}
  podMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  portName: web
  priorityClassName: ""
  probeNamespaceSelector: {}
  probeSelector: {}
  prometheusExternalLabelName: ""
  prometheusExternalLabelNameClear: false
  querySpec: {}
  readinessProbe:
    enabled: true
    failureThreshold: 10
    initialDelaySeconds: 0
    path: /-/ready
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3
  remoteRead: []
  remoteWrite: []
  replicaCount: 1
  replicaExternalLabelName: ""
  replicaExternalLabelNameClear: false
  resources: {}
  retention: 10d
  retentionSize: ""
  routePrefix: /
  ruleNamespaceSelector: {}
  ruleSelector: {}
  scrapeInterval: ""
  secrets: []
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    healthCheckNodePort: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePort: ""
    port: 9090
    stickySessions: ""
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: ""
  serviceMonitor:
    enabled: true
    interval: ""
    metricRelabelings: []
    relabelings: []
  serviceMonitorNamespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: In
      values:
      - monitoring
      - prometheus
      - default
      - kube-system
      - kube-public
      - kube-node-lease
      - cert-manager
      - pix-qa
      - pix
      - tbanks-qa
      - tbanks
      - ingress-nginx
      - integrations
      - integrations-qa
  serviceMonitorSelector: {}
  shards: 1
  startupProbe:
    enabled: true
    failureThreshold: 60
    initialDelaySeconds: 0
    path: /-/ready
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 3
  storageSpec: {}
  thanos:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      readOnlyRootFilesystem: false
      runAsNonRoot: true
    create: false
    extraArgs: []
    extraVolumeMounts: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/thanos
      tag: 0.24.0-scratch-r10
    ingress:
      annotations: {}
      enabled: false
      hosts:
      - name: thanos.prometheus.local
        path: /
      ingressClassName: ""
      tls: {}
    livenessProbe:
      enabled: true
      failureThreshold: 120
      initialDelaySeconds: 0
      path: /-/healthy
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    objectStorageConfig: {}
    prometheusUrl: ""
    readinessProbe:
      enabled: true
      failureThreshold: 120
      initialDelaySeconds: 0
      path: /-/ready
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: None
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: ""
      port: 10901
      type: ClusterIP
  tolerations: []
  volumeMounts: []
  volumes: []
  walCompression: false
rbac:
  apiVersion: v1beta1
  create: true
  pspEnabled: true
